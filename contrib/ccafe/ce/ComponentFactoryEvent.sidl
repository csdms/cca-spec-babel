package ccaffeine version 0.3 {
package ce {

/** 
   Notify interested parties that a new component factory 
   is in play or an old one is going away.
*/
interface ComponentFactoryEvent  extends ContextEvent
{


  /** Returns the integer standard type for the event. If the
      event is not one of the standard types, then this returns
      ContextEventType.NONE. 
      For ComponentFactoryEvent, the type is
      FactoryPortAdded
      FactoryPortRemovePending
   */
   ContextEventType getContextEventType() ; 

  /** 
    Fetch the component generating the event.
    @returns the componentID of the component generating the event,
     or null if the container itself generated the event.
   */
   gov.cca.ComponentID getContextEventSourceID() ; 

  /** Within a source component, there may be more than one emitter. Key
      is the self-proclaimed serial number of the emitter, unique
      within the scope of the result from getSourceID.
   */
   int getContextEventSourceKey() ; 

  /** For each source:key pair events are emitted in a monotonically
      increasing sequence. It is hoped 64 bits is enough to handle
      long runs.
   */
   long getContextEventSequenceNumber() ; 

  /** Annotated, stringified event information. 
      @return an arbitrary string.
   */
   string getContextEventDescription() ;

  /** Set or amend the description, as determined by the implementation.
   */
   void setContextEventDescription(in string description) ;

  /////// ComponentFactoryEvent specific functions
  /** @return the componentid of the factory being mentioned. */
   gov.cca.ComponentID getFactoryID() ; /* throw? */

  /** @return the properties of the port that provides the factory function */
   gov.cca.TypeMap getFactoryPortProperties() ; /* throw? */
  
}  // end interface ComponentFactoryEvent

} // end package ce
} // end package ccaffeine

